// <auto-generated />
using System;
using InsuraTech.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuraTech.Services.Migrations
{
    [DbContext(typeof(InsuraTechContext))]
    [Migration("20250603135428_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsuraTech.Services.Database.ClaimRequest", b =>
                {
                    b.Property<int>("ClaimRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimRequestId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("InsurancePolicyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClaimRequestId");

                    b.HasIndex("InsurancePolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("ClaimRequests");

                    b.HasData(
                        new
                        {
                            ClaimRequestId = 1,
                            Description = "Windshield damage due to hail.",
                            EstimatedAmount = 350.00m,
                            InsurancePolicyId = 1,
                            IsDeleted = false,
                            Status = "In progress",
                            SubmittedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClaimRequestId = 2,
                            Comment = "To high ammount requested.",
                            Description = "Theft of insured vehicle.",
                            EstimatedAmount = 5000.00m,
                            InsurancePolicyId = 2,
                            IsDeleted = false,
                            Status = "Declined",
                            SubmittedAt = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            ClaimRequestId = 3,
                            Comment = "Assessment required.",
                            Description = "Fire damage in kitchen.",
                            EstimatedAmount = 220.00m,
                            InsurancePolicyId = 3,
                            IsDeleted = false,
                            Status = "Accepted",
                            SubmittedAt = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            ClaimRequestId = 4,
                            Description = "Roof collapsed during storm.",
                            EstimatedAmount = 4000.00m,
                            InsurancePolicyId = 4,
                            IsDeleted = false,
                            Status = "In progress",
                            SubmittedAt = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClaimRequestId = 5,
                            Description = "Broken window caused by vandalism.",
                            EstimatedAmount = 120.00m,
                            InsurancePolicyId = 5,
                            IsDeleted = false,
                            Status = "In progress",
                            SubmittedAt = new DateTime(2025, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = "8OB3D2RPgagepehex0hLz6HdM1Q=",
                            PasswordSalt = "mGr/PGoIDO5ILaJYl3MvJg==",
                            PhoneNumber = "068225599",
                            RegistrationDate = new DateTime(2024, 4, 16, 22, 52, 3, 0, DateTimeKind.Unspecified),
                            Username = "mobile"
                        },
                        new
                        {
                            ClientId = 2,
                            Email = "clara.wong@example.com",
                            FirstName = "Clara",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Wong",
                            PasswordHash = "8OB3D2RPgagepehex0hLz6HdM1Q=",
                            PasswordSalt = "mGr/PGoIDO5ILaJYl3MvJg==",
                            PhoneNumber = "068113399",
                            RegistrationDate = new DateTime(2024, 4, 16, 22, 52, 3, 0, DateTimeKind.Unspecified),
                            Username = "claraW"
                        },
                        new
                        {
                            ClientId = 3,
                            Email = "martin.taylor@example.com",
                            FirstName = "Martin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Taylor",
                            PasswordHash = "8OB3D2RPgagepehex0hLz6HdM1Q=",
                            PasswordSalt = "mGr/PGoIDO5ILaJYl3MvJg==",
                            PhoneNumber = "068224400",
                            RegistrationDate = new DateTime(2024, 4, 16, 22, 52, 3, 0, DateTimeKind.Unspecified),
                            Username = "martinT"
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.ClientFeedback", b =>
                {
                    b.Property<int>("ClientFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientFeedbackId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurancePackageId")
                        .HasColumnType("int");

                    b.Property<int>("InsurancePolicyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ClientFeedbackId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsurancePackageId");

                    b.HasIndex("InsurancePolicyId");

                    b.ToTable("ClientFeedbacks");

                    b.HasData(
                        new
                        {
                            ClientFeedbackId = 1,
                            ClientId = 1,
                            Comment = "Great experience!",
                            CreatedAt = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsurancePackageId = 1,
                            InsurancePolicyId = 1,
                            IsDeleted = false,
                            Rating = 5
                        },
                        new
                        {
                            ClientFeedbackId = 2,
                            ClientId = 1,
                            Comment = "Good service.",
                            CreatedAt = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsurancePackageId = 2,
                            InsurancePolicyId = 2,
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            ClientFeedbackId = 3,
                            ClientId = 2,
                            Comment = "Average coverage.",
                            CreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletionTime = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsurancePackageId = 3,
                            InsurancePolicyId = 3,
                            IsDeleted = true,
                            Rating = 3
                        },
                        new
                        {
                            ClientFeedbackId = 4,
                            ClientId = 2,
                            Comment = "Family policy was useful.",
                            CreatedAt = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsurancePackageId = 4,
                            InsurancePolicyId = 4,
                            IsDeleted = false,
                            Rating = 4
                        },
                        new
                        {
                            ClientFeedbackId = 5,
                            ClientId = 3,
                            Comment = "Quick claim approval.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletionTime = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsurancePackageId = 2,
                            InsurancePolicyId = 5,
                            IsDeleted = true,
                            Rating = 5
                        },
                        new
                        {
                            ClientFeedbackId = 6,
                            ClientId = 1,
                            Comment = "Travel insurance was perfect!",
                            CreatedAt = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsurancePackageId = 4,
                            InsurancePolicyId = 7,
                            IsDeleted = false,
                            Rating = 5
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.InsurancePackage", b =>
                {
                    b.Property<int>("InsurancePackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsurancePackageId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsurancePackageId");

                    b.ToTable("InsurancePackages");

                    b.HasData(
                        new
                        {
                            InsurancePackageId = 1,
                            Description = "Essential coverage for your vehicle, including third-party liability and collision coverage.",
                            DurationDays = 365,
                            IsDeleted = false,
                            Name = "Basic Car Insurance",
                            Price = 199.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 2,
                            Description = "Extensive protection for your home covering fire, theft, natural disasters, and personal liability.",
                            DurationDays = 90,
                            IsDeleted = false,
                            Name = "Comprehensive Home Insurance",
                            Price = 349.50m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 3,
                            Description = "Premium medical coverage offering extensive benefits including hospitalization, dental care, and vision care.",
                            DurationDays = 180,
                            IsDeleted = false,
                            Name = "Premium Health Insurance",
                            Price = 499.00m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 4,
                            Description = "Travel safely with your family across Europe. Coverage for medical emergencies, trip cancellations, and lost luggage for up to 4 persons.",
                            DurationDays = 7,
                            IsDeleted = false,
                            Name = "Travel Insurance Europe Family",
                            Price = 179.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 5,
                            Description = "Protect your furry friends with coverage for vet bills, surgeries, and medications.",
                            DurationDays = 180,
                            IsDeleted = false,
                            Name = "Pet Insurance",
                            Price = 89.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 6,
                            Description = "Specialized coverage for motorcycle riders including collision and liability protection.",
                            DurationDays = 270,
                            IsDeleted = false,
                            Name = "Motorcycle Insurance",
                            Price = 149.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 7,
                            Description = "Affordable health insurance tailored for students with coverage for regular checkups and emergencies.",
                            DurationDays = 180,
                            IsDeleted = false,
                            Name = "Student Health Plan",
                            Price = 179.99m,
                            StateMachine = "draft"
                        },
                        new
                        {
                            InsurancePackageId = 8,
                            Description = "Comprehensive casco coverage for vehicles, including theft, vandalism, and natural disasters.",
                            DurationDays = 365,
                            IsDeleted = false,
                            Name = "Casco Car Insurance",
                            Price = 349.00m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 9,
                            Description = "Ultimate car protection: covers basic, casco, and additional roadside assistance and legal support.",
                            DurationDays = 365,
                            IsDeleted = false,
                            Name = "Full Car Insurance",
                            Price = 599.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 10,
                            Description = "Coverage for single travelers exploring Europe, including medical emergencies and trip interruptions.",
                            DurationDays = 7,
                            IsDeleted = false,
                            Name = "Travel Insurance Europe Single",
                            Price = 49.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 11,
                            Description = "Global coverage for individual travelers: medical, lost luggage, trip delay, and emergency evacuation.",
                            DurationDays = 14,
                            IsDeleted = false,
                            Name = "Travel Insurance World Single",
                            Price = 99.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 12,
                            Description = "Complete travel insurance for your family worldwide. Includes 4 persons: medical, trip cancellation, and lost luggage.",
                            DurationDays = 14,
                            IsDeleted = false,
                            Name = "Travel Insurance World Family",
                            Price = 189.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 13,
                            Description = "Protect your property from the financial consequences of flooding. Covers damage repair and replacement.",
                            DurationDays = 180,
                            IsDeleted = false,
                            Name = "Flood Insurance",
                            Price = 119.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 14,
                            Description = "Coverage against losses or damages caused by fire, including structural repairs and contents replacement.",
                            DurationDays = 180,
                            IsDeleted = false,
                            Name = "Fire Insurance",
                            Price = 109.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 15,
                            Description = "Financial protection for your home and belongings in case of burglary or forced entry.",
                            DurationDays = 180,
                            IsDeleted = false,
                            Name = "Burglary Insurance",
                            Price = 99.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 16,
                            Description = "Complete package covering fire, flood, and burglary for total home security and peace of mind.",
                            DurationDays = 180,
                            IsDeleted = false,
                            Name = "Full Home Insurance",
                            Price = 399.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 17,
                            Description = "Short-term coverage for essential home appliances such as refrigerators, washing machines, and ovens. Covers repair or replacement costs due to mechanical breakdowns.",
                            DurationDays = 30,
                            IsDeleted = false,
                            Name = "Appliance Breakdown Insurance",
                            Price = 39.99m,
                            StateMachine = "active"
                        },
                        new
                        {
                            InsurancePackageId = 18,
                            Description = "Protect your bicycle against theft and accidental damage with this affordable 30-day plan. Suitable for daily commuters and recreational cyclists.",
                            DurationDays = 30,
                            IsDeleted = false,
                            Name = "Bicycle Theft & Damage Insurance",
                            Price = 24.99m,
                            StateMachine = "active"
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.InsurancePolicy", b =>
                {
                    b.Property<int>("InsurancePolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsurancePolicyId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasActiveClaimRequest")
                        .HasColumnType("bit");

                    b.Property<int>("InsurancePackageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotificationSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InsurancePolicyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsurancePackageId");

                    b.ToTable("InsurancePolicies");

                    b.HasData(
                        new
                        {
                            InsurancePolicyId = 1,
                            ClientId = 1,
                            EndDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasActiveClaimRequest = true,
                            InsurancePackageId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsNotificationSent = true,
                            IsPaid = true,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InsurancePolicyId = 2,
                            ClientId = 1,
                            EndDate = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasActiveClaimRequest = false,
                            InsurancePackageId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsNotificationSent = true,
                            IsPaid = true,
                            StartDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InsurancePolicyId = 3,
                            ClientId = 2,
                            EndDate = new DateTime(2025, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasActiveClaimRequest = false,
                            InsurancePackageId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            IsNotificationSent = true,
                            IsPaid = true,
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InsurancePolicyId = 4,
                            ClientId = 2,
                            EndDate = new DateTime(2026, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasActiveClaimRequest = true,
                            InsurancePackageId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsNotificationSent = false,
                            IsPaid = true,
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InsurancePolicyId = 5,
                            ClientId = 3,
                            EndDate = new DateTime(2025, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasActiveClaimRequest = true,
                            InsurancePackageId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsNotificationSent = true,
                            IsPaid = true,
                            StartDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InsurancePolicyId = 6,
                            ClientId = 1,
                            EndDate = new DateTime(2025, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasActiveClaimRequest = false,
                            InsurancePackageId = 3,
                            IsActive = false,
                            IsDeleted = false,
                            IsNotificationSent = false,
                            IsPaid = false,
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InsurancePolicyId = 7,
                            ClientId = 1,
                            EndDate = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasActiveClaimRequest = false,
                            InsurancePackageId = 4,
                            IsActive = true,
                            IsDeleted = false,
                            IsNotificationSent = false,
                            IsPaid = true,
                            StartDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.LoyaltyProgram", b =>
                {
                    b.Property<int>("LoyaltyProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoyaltyProgramId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.HasKey("LoyaltyProgramId");

                    b.HasIndex("ClientId");

                    b.ToTable("LoyaltyPrograms");

                    b.HasData(
                        new
                        {
                            LoyaltyProgramId = 1,
                            ClientId = 1,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2025, 6, 2, 12, 32, 3, 0, DateTimeKind.Unspecified),
                            Points = 34,
                            Tier = 1
                        },
                        new
                        {
                            LoyaltyProgramId = 2,
                            ClientId = 2,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2025, 4, 1, 10, 52, 7, 0, DateTimeKind.Unspecified),
                            Points = 29,
                            Tier = 0
                        },
                        new
                        {
                            LoyaltyProgramId = 3,
                            ClientId = 3,
                            IsDeleted = false,
                            LastUpdated = new DateTime(2024, 5, 20, 10, 14, 1, 0, DateTimeKind.Unspecified),
                            Points = 17,
                            Tier = 0
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurancePolicyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsurancePolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            ClientId = 1,
                            InsurancePolicyId = 2,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "Your policy is expiring on: 13.8.2025.",
                            SentAt = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            NotificationId = 2,
                            ClientId = 2,
                            InsurancePolicyId = 3,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "Your policy is expiring on: 28.8.2025",
                            SentAt = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            NotificationId = 3,
                            ClientId = 3,
                            InsurancePolicyId = 5,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "Your policy is expiring on: 18.8.2025.",
                            SentAt = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            NotificationId = 4,
                            ClientId = 1,
                            InsurancePolicyId = 1,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "Your policy is expiring on: 1.1.2026.",
                            SentAt = new DateTime(2025, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Administrator with full access to settings, user permissions and platform operations.",
                            IsDeleted = false,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "An Insurance Agent manages policies, processes claims, and assists customers with recommendations and approvals.",
                            IsDeleted = false,
                            RoleName = "Agent"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Supports insurance agents by handling administrative tasks, managing client inquiries, and processing policy updates",
                            IsDeleted = false,
                            RoleName = "Assistant"
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.SupportTicket", b =>
                {
                    b.Property<int>("SupportTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupportTicketId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SupportTicketId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");

                    b.HasData(
                        new
                        {
                            SupportTicketId = 1,
                            ClientId = 1,
                            CreatedAt = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnswered = true,
                            IsClosed = true,
                            IsDeleted = false,
                            Message = "Can you explain what is covered in my policy?",
                            Reply = "Your policy covers vehicle damage, theft, and third-party liability.",
                            Subject = "Policy Coverage Details",
                            UserId = 1
                        },
                        new
                        {
                            SupportTicketId = 2,
                            ClientId = 1,
                            CreatedAt = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnswered = false,
                            IsClosed = true,
                            IsDeleted = false,
                            Message = "I’m facing issues while making payment through Stripe.",
                            Subject = "Unable to make payment"
                        },
                        new
                        {
                            SupportTicketId = 3,
                            ClientId = 1,
                            CreatedAt = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnswered = true,
                            IsClosed = true,
                            IsDeleted = false,
                            Message = "What is the current status of my claim request?",
                            Reply = "Your claim request is being processed and will be resolved within 3 business days.",
                            Subject = "Claim Status",
                            UserId = 1
                        },
                        new
                        {
                            SupportTicketId = 4,
                            ClientId = 2,
                            CreatedAt = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnswered = true,
                            IsClosed = true,
                            IsDeleted = false,
                            Message = "How can I change my registered email address?",
                            Reply = "Please navigate to the profile section to update your contact details.",
                            Subject = "Update contact information",
                            UserId = 1
                        },
                        new
                        {
                            SupportTicketId = 5,
                            ClientId = 3,
                            CreatedAt = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnswered = false,
                            IsClosed = false,
                            IsDeleted = false,
                            Message = "Why did I not receive an alert before my policy expired?",
                            Subject = "Policy expiration alert"
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurancePolicyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsurancePolicyId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            Amount = 197.99000000000001,
                            ClientId = 1,
                            InsurancePolicyId = 1,
                            IsDeleted = false,
                            PayerId = "transactiontest",
                            PaymentId = "transactiontest",
                            PaymentMethod = "paypal",
                            TransactionDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 2,
                            Amount = 346.0,
                            ClientId = 1,
                            InsurancePolicyId = 2,
                            IsDeleted = false,
                            PayerId = "transactiontest",
                            PaymentId = "transactiontest",
                            PaymentMethod = "paypal",
                            TransactionDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 3,
                            Amount = 494.0,
                            ClientId = 2,
                            InsurancePolicyId = 3,
                            IsDeleted = false,
                            PayerId = "transactiontest",
                            PaymentId = "transactiontest",
                            PaymentMethod = "paypal",
                            TransactionDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 4,
                            Amount = 197.0,
                            ClientId = 2,
                            InsurancePolicyId = 4,
                            IsDeleted = false,
                            PayerId = "transactiontest",
                            PaymentId = "transactiontest",
                            PaymentMethod = "paypal",
                            TransactionDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 5,
                            Amount = 346.0,
                            ClientId = 3,
                            InsurancePolicyId = 5,
                            IsDeleted = false,
                            PayerId = "transactiontest",
                            PaymentId = "transactiontest",
                            PaymentMethod = "paypal",
                            TransactionDate = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 6,
                            Amount = 170.99000000000001,
                            ClientId = 1,
                            InsurancePolicyId = 7,
                            IsDeleted = false,
                            PayerId = "transactiontest",
                            PaymentId = "transactiontest",
                            PaymentMethod = "paypal",
                            TransactionDate = new DateTime(2025, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@example.com",
                            FirstName = "Liam",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Schneider",
                            PasswordHash = "+zHjeAMut/qVPctS7uaREf4lN1w=",
                            PasswordSalt = "sOQz4gFWKGh9SeOhqXpqyw==",
                            PhoneNumber = "069000111",
                            Username = "desktop"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "agent@example.com",
                            FirstName = "Emily",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Carter",
                            PasswordHash = "9hkvRabWkVOkr+Hqr52lzoMKiKo=",
                            PasswordSalt = "2ICZgybWHKj+fYpTc6/19g==",
                            PhoneNumber = "069000222",
                            Username = "agent"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "assistant@example.com",
                            FirstName = "Sofia",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Alvarez",
                            PasswordHash = "sfrZuf7hqepHmMV6gt83a/RaB9g=",
                            PasswordSalt = "Ct53DBogAC4vUxlb2WodgQ==",
                            PhoneNumber = "069000333",
                            Username = "assistant"
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("InsuraTech.Services.Database.ClaimRequest", b =>
                {
                    b.HasOne("InsuraTech.Services.Database.InsurancePolicy", "insurancePolicy")
                        .WithMany("ClaimRequests")
                        .HasForeignKey("InsurancePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");

                    b.Navigation("insurancePolicy");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.ClientFeedback", b =>
                {
                    b.HasOne("InsuraTech.Services.Database.Client", "Client")
                        .WithMany("ClientFeedbacks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.InsurancePackage", "InsurancePackage")
                        .WithMany("ClientFeedbacks")
                        .HasForeignKey("InsurancePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("InsurancePolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InsurancePackage");

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.InsurancePolicy", b =>
                {
                    b.HasOne("InsuraTech.Services.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.InsurancePackage", "InsurancePackage")
                        .WithMany("Policies")
                        .HasForeignKey("InsurancePackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InsurancePackage");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.LoyaltyProgram", b =>
                {
                    b.HasOne("InsuraTech.Services.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.Notification", b =>
                {
                    b.HasOne("InsuraTech.Services.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("InsurancePolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("InsurancePolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.SupportTicket", b =>
                {
                    b.HasOne("InsuraTech.Services.Database.Client", "Client")
                        .WithMany("SupportTickets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.Transaction", b =>
                {
                    b.HasOne("InsuraTech.Services.Database.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.InsurancePolicy", "InsurancePolicy")
                        .WithMany("Transactions")
                        .HasForeignKey("InsurancePolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.UserRole", b =>
                {
                    b.HasOne("InsuraTech.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuraTech.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.Client", b =>
                {
                    b.Navigation("ClientFeedbacks");

                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.InsurancePackage", b =>
                {
                    b.Navigation("ClientFeedbacks");

                    b.Navigation("Policies");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.InsurancePolicy", b =>
                {
                    b.Navigation("ClaimRequests");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("InsuraTech.Services.Database.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
